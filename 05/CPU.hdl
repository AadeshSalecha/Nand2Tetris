//Author    : Aadesh Salecha
//Course    : Nand2Tetris
//Date      : March 2016


// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a = instruction, b = aluouta, sel = instruction[15], out = mux1out);
    Not(in = instruction[15], out = aload);
    Or(a = aload, b = instruction[5], out = aload1);
    ARegister(in = mux1out, load = aload1, out = aout, out[0..14] = addressM);

    Mux16(a = aout, b = inM, sel = instruction[12], out = aluy);

    And(a = instruction[4], b = instruction[15], out = loadd);
    DRegister(in = aluoutd, load = loadd , out = alux);

    ALU(x = alux, y = aluy, zx = instruction[11], nx =instruction[10] , zy = instruction[9], ny =instruction[8] , f = instruction[7], no =instruction[6] , out = aluouta, out = aluoutd, out = outM, zr = zr, ng = alung);

    And(a=instruction[15], b=instruction[3], out=writeM);
    Not(in = zr, out = notzr);
    Not(in = alung, out = notng);

    And(a = notzr, b = notng, out = b);
    And(a = zr, b = true, out = c);
    Or(a = zr, b = notng, out = d);
    And(a = notzr, b = alung, out = e);
    Or(a = zr, b = alung, out = g);

    Mux8Way(sel=instruction[0..2], out = jump1,a = false,b = b,c = c,d = d,e = e,f = notzr,g = g ,h = true);
    And(a = jump1, b = instruction[15] , out = jump);
    Not(in = jump, out = inc);
    PC(in = aout, load = jump, inc = inc, reset = reset,out[0..14] = pc);
}